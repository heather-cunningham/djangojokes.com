"""
Django settings for djangojokes project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-029avp=lr*518q_v-b43$3g4*3ac0d0mki4-*6h7i4^*9^wakd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    ## Django lib apps
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    ## Third-party, I installed apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',
    'crispy_bootstrap5',
    'private_storage',

    ## My local apps
    'common.apps.CommonConfig',
    'jobs.apps.JobsConfig',
    'jokes.apps.JokesConfig',
    'pages.apps.PagesConfig',
    'users.apps.UsersConfig',
]


SITE_ID = 1


CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangojokes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangojokes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'jokes',
        'USER': 'postgres',
        'PASSWORD': '3l3ph0ntsNeverForget',
        'HOST': 'localhost',
        'PORT': 5432
    }
    ## SQLite db which comes embedded w/ Django by default, 
    #### but Postgres is the most pop & more robust.
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


## Email
SENDGRID_API_KEY = os.environ.get("SENDGRID_API_KEY")
EMAIL_HOST = "smtp.sendgrid.net"
EMAIL_PORT = 587
EMAIL_USE_TLS= True
EMAIL_HOST_USER = "apikey"
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
DEFAULT_FROM_EMAIL = "cunningham.heatherirene@gmail.com"


AUTHENTICATION_BACKENDS = {
    # Needed to login by username in Django admin, even w/o `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth`-specific auth methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# AUTHENTICATION SETTINGS
AUTH_USER_MODEL = 'users.CustomUser'
LOGIN_URL = "account_login"
LOGIN_REDIRECT_URL = "pages:homepage"


## django-allauth settings
ACCOUNT_AUTHENTICATION_METHOD = "email" # Default: 'username'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRES_DAYS = 2 # Default: 3, Class directions: 1, but sometimes I don't get the email 
## 'til the next day.  So, I set it to 2.  
ACCOUNT_EMAIL_REQUIRED = True # Default: False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Default: 'optional'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5 # Default: 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300 # Default 300
ACCOUNT_LOGOUT_REDIRECT_URL = "account_login" # Default: '/'
ACCOUNT_USERNAME_REQUIRED = False  # Default: True


# ACCOUNT_SIGNUP_FORM_CLASS = "users.forms.MySignupForm"
ACCOUNT_FORMS = {"signup": "users.forms.MySignupForm"}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

## CLOUD AWS S3 File storage settings
## -----------------------------------
# AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = 'django-jokes-aws-s3-bucket' # YOUR BUCKET NAME
# AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
# AWS_S3_SIGNATURE_VERSION = 's3v4'
# AWS_DEFAULT_ACL = None # Use S3 bucket's setting

# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400',
# }
# AWS_S3_REGION_NAME = 'us-east-1'  # REPLACE WITH YOUR BUCKET REGION
# # AWS_S3_REGION_NAME = "US East (N. Virginia) us-east-1"

# STATIC_ROOT = BASE_DIR / 'staticfiles' ## Fallback to local storage if S3 cloud no worky
# STATICFILES_STORAGE = 'djangojokes.storage_backends.StaticStorage' ## Dflt = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# DEFAULT_FILE_STORAGE = 'djangojokes.storage_backends.PublicMediaStorage' ## Dflt = 'django.core.files.storage.FileSystemStorage'
# PRIVATE_FILE_STORAGE = 'djangojokes.storage_backends.PrivateMediaStorage' ## not a built-in Django setting

# STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
# MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static', 
]
## Do NOT delete the above because it's from where the static files are collected, 
## not where they are stored.

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# private-storage settings
PRIVATE_STORAGE_ROOT = MEDIA_ROOT / 'private/'
PRIVATE_STORAGE_AUTH_FUNCTION = 'private_storage.permissions.allow_staff'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## MUST stay at bottom of this file
if (os.environ.get('ENVIRONMENT') != 'production'):
    from .local_settings import *
## DON'T PUT ANYTHING BELOW THIS